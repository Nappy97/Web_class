package com.lec.spring.repository;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import com.lec.spring.domain.Authority;
import com.lec.spring.domain.User;
import com.lec.spring.domain.Write;

@SpringBootTest
class WriteRepositoryTest {

	@Autowired
	private UserRepository userRepository;
	
	@Autowired
	private WriteRepository writeRepository;
	
	@Autowired
	private AuthorityRepository authorityRepository;
	
	@Test
	void init() {
		System.out.println("[init]");
		
		// Authority 생성
		Authority auth_member = Authority.builder()
					.name("ROLE_MEMBER")
					.build();
		Authority auth_admin = Authority.builder()
				.name("ROLE_ADMIN")
				.build();
		
		auth_member = authorityRepository.saveAndFlush(auth_member);
		auth_admin = authorityRepository.saveAndFlush(auth_admin);
		
		authorityRepository.findAll().forEach(System.out::println);

		// User 생성
		User user1 = User.builder()
				.username("USER1")
				.password("1234")  // 나중에 Security 적용하면 PasswordEncoder사용해야함.
				.name("회원1")
				.build();
		
		User user2 = User.builder()
				.username("USER2")
				.password("1234")
				.name("회원2")
				.build();
		
		User admin1 = User.builder()
				.username("ADMIN1")
				.password("1234")
				.name("관리자1")
				.build();

		user1.addAuthority(auth_member);
		admin1.addAuthority(auth_member, auth_admin);
		
		user1 = userRepository.save(user1);
		user2 = userRepository.save(user2);
		admin1 = userRepository.save(admin1);
		
		userRepository.findAll().forEach(System.out::println);
	
		// 글 Write 작성
		Write w1 = Write.builder()
				.subject("제목입니다1")
				.content("내용입니다1")
				.user(user1)
				.build();
		
		Write w2 = Write.builder()
				.subject("제목입니다2")
				.content("내용입니다2")
				.user(user1)
				.build();
		
		Write w3 = Write.builder()
				.subject("제목입니다3")
				.content("내용입니다3")
				.user(admin1)
				.build();
		
		Write w4 = Write.builder()
				.subject("제목입니다4")
				.content("내용입니다4")
				.user(admin1)
				.build();
		
		w1 = writeRepository.save(w1);
		w2 = writeRepository.save(w2);
		w3 = writeRepository.save(w3);
		w4 = writeRepository.save(w4);
		
		writeRepository.findAll().forEach(System.out::println);


	
	}
	
	

}
