package com.lec.spring.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

// 스프링 시큐리티 설정
@Configuration // 스프링 컨테이너에 빈으로 생성
@EnableWebSecurity // WebSecurity 를 활성화 해준다.
					// 아래 스프링 시큐리티 필터가 스프링 필터 체인에 등록이 된다.
public class SecurityConfig extends WebSecurityConfigurerAdapter {

	// PasswordEncoder 를 bean 으로 IoC 에 등록
	// IoC 에 등록된다, IoC 내에선 '어디서든' 가져다가 사용할수 있다.
	@Bean
	public PasswordEncoder encoder() {
		System.out.println("PasswordEncoder bean 생성");
		return new BCryptPasswordEncoder();
	}

	@Override
	protected void configure(HttpSecurity http) throws Exception {

		http.csrf().disable(); // CSRF 비활성화

		http // HttpSecurity 객체
				/**********************************************
				 * ① request URL 에 대한 접근 권한 세팅 ExpressionInterceptUrlRegistry 객체 리턴. 이하 이 객체의
				 * 메소드체이닝
				 **********************************************/
				.authorizeRequests()

				// URL 과 접근권한 세팅(들)
				// ↓ /board/detail/** 주소로 들어오는 요청은 '인증'만 필요.
				.antMatchers("/board/detail/**").authenticated()

				// ↓ /board/write/** /board/update/** /board/delete/** 주소로 들어오는 요청은 '인증' 뿐 아니라
				// ROLE_MEMBER 나 ROLE_ADMIN 권한을 갖고 있어야 한다 ('인가')
				.antMatchers("/board/write/**", "board/update/**", "/board/delete/**")
				.access("hasRole('ROLE_MEMBER) or hasRole('ROLE_ADMIN')")

				// ↓ 그 밖의 다른 요청은 모두 permit! (위 주소들만 아니면 누구나 접근 가능!)
				.anyRequest().permitAll()
				
				.and()	// 다시, HttpSecurity 객체 리턴. 세팅중 다른 세팅 전환시 호출
				
				;

	} // end configure()

}
